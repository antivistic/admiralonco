% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_confirmation.R
\name{filter_confirmation}
\alias{filter_confirmation}
\title{Filter Confirmed Assessments}
\usage{
filter_confirmation(
  dataset,
  by_vars,
  join_vars,
  first_cond = NULL,
  order,
  filter,
  check_type = "warning"
)
}
\arguments{
\item{dataset}{Input dataset

The variables specified for \code{by_vars}, \code{join_vars}, and \code{order} are
expected.}

\item{by_vars}{By variables

The specified variables are used as by variables for joining the input
dataset with itself.}

\item{join_vars}{Variables to keep from joined dataset

The variables needed from the subsequent observations should be specified
for this parameter. The specified variables are added to the joined dataset
with suffix ".join". For example to select all observations with \code{AVALC == "Y"} and \code{AVALC == "Y"} for at least one subsequent visit \code{join_vars = vars(AVALC, AVISITN)} and \code{filter = AVALC == "Y" & AVALC.join == "Y" & AVISITN < AVISITN.join} could be specified.}

\item{first_cond}{Condition for selecting range of data

If this argument is specified, the subsequent observations are restricted
up to the first observation where the specified condition is fulfilled. If
the condition is not fulfilled for any of the subsequent observations, all
observations are removed.}

\item{order}{Order

The observations are ordered by the specified order.}

\item{filter}{Condition for selecting observations

The filter is applied to the joined dataset for selecting the confirmed
observations. The condition can include summary functions. The joined
dataset is grouped by the original observations. I.e., the summary function
are applied to all observations up to the confirmation observation. For
example, \code{filter = AVALC == "CR" & all(AVALC.join \%in\% c("CR", "NE")) & count_vals(var = AVALC.join, val = "NE") <= 1} selects observations with
response "CR" and for all observations up to the confirmation observation
the response is "CR" or "NE" and there is at most one "NE".}

\item{check_type}{Check uniqueness?

If \code{"warning"} or \code{"error"} is specified, the specified message is issued
if the observations of the input dataset are not unique with respect to the
by variables and the order.

\emph{Default:} \code{"none"}

\emph{Permitted Values:} \code{"none"}, \code{"warning"}, \code{"error"}}
}
\description{
The function filters observation using a condition taking subsequent
observations into account. For example, it could select all observations with
\code{AVALC == "Y"} and \code{AVALC == "Y"} for at least one subsequent observation.
The input dataset is joined with itself to enable conditions taking variables
from both the current observation and the subsequent observations into
account. The suffix ".join" is added to the variables from the subsequent
observations.
}
\examples{

library(dplyr)
library(admiralonco)

# filter observations with AVALC == "Y" and AVALC == "Y" at one subsequent visit
data <- tibble::tribble(
  ~USUBJID, ~AVISITN, ~AVALC,
  "1",      1,        "Y",
  "1",      2,        "N",
  "1",      3,        "Y",
  "1",      4,        "N",
  "2",      1,        "Y",
  "2",      2,        "N",
  "3",      1,        "Y",
  "4",      1,        "N",
  "4",      2,        "N",
)

filter_confirmation(
  data,
  by_vars = vars(USUBJID),
  join_vars = vars(AVALC, AVISITN),
  order = vars(AVISITN),
  filter = AVALC == "Y" & AVALC.join == "Y" & AVISITN < AVISITN.join
)

# select observations with AVALC == "CR", AVALC == "CR" at a subsequent visit,
# only "CR" or "NE" in between, and at most one "NE" in between
data <- tibble::tribble(
  ~USUBJID, ~AVISITN, ~AVALC,
  "1",      1,        "PR",
  "1",      2,        "CR",
  "1",      3,        "NE",
  "1",      4,        "CR",
  "1",      5,        "NE",
  "2",      1,        "CR",
  "2",      2,        "PR",
  "2",      3,        "CR",
  "3",      1,        "CR",
  "4",      1,        "CR",
  "4",      2,        "NE",
  "4",      3,        "NE",
  "4",      4,        "CR",
  "4",      5,        "PR"
)

filter_confirmation(
  data,
  by_vars = vars(USUBJID),
  join_vars = vars(AVALC),
  order = vars(AVISITN),
  first_cond = AVALC.join == "CR",
  filter = AVALC == "CR" & all(AVALC.join \%in\% c("CR", "NE")) &
    count_vals(var = AVALC.join, val = "NE") <= 1
)
}
\author{
Stefan Bundfuss
}
\keyword{adam}
\keyword{user_utility}
